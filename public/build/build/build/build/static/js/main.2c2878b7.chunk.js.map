{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","alt","poster","src","style","width","title","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","this","fetch","mode","header","Access-Control-Allow-Origin","then","data","json","catch","err","console","log","movie","i","src_Movie","id","title_english","medium_cover_image","_renderMovies","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA2BA,SAASA,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,GAG3C,SAASK,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,IAAKC,EAAQF,EAARE,OACvB,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBK,IAAKD,EAAQE,MAAO,CAACC,MAAM,SAAUJ,IAAKA,EAAKK,MAAOL,IAgB9EM,MA7Cf,SAAAC,GAAiD,IAAjCF,EAAiCE,EAAjCF,MAAOJ,EAA0BM,EAA1BN,OAAQO,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaG,OAAQA,EAAQD,IAAKK,KAEtCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAKS,GACLX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVW,EAAOE,IAAI,SAACjB,EAAMkB,GAAP,OAAiBjB,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOmB,IAAKD,OAEhEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACImB,KAAML,EACNM,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,gBCsBjBC,6MAtCbC,MAAQ,KAcPC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA7B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSC,EAAKC,WADd,OACNP,EADMG,EAAAK,KAEZF,EAAKG,SAAS,CACZT,WAHU,wBAAAG,EAAAO,SAAAX,EAAAY,WAOdJ,SAAW,WACT,OAAOK,MAAM,wDAAyD,CAACC,KAAM,OAAQC,OAAO,CAC1FC,8BAA8B,OAE/BC,KAAM,SAAAC,GAAI,OAAIA,EAAKC,SACnBF,KAAK,SAAAE,GAAI,OAAIA,EAAKD,KAAKjB,SACvBmB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAxB1BT,KAAKb,qDAIL,OADAuB,QAAQC,IAAIX,KAAKd,MAAMG,QAChBW,KAAKd,MAAMG,OAAOb,IACvB,SAACoC,EAAMC,GAAP,OAAarD,EAAAC,EAAAC,cAACoD,EAAD,CAAOpC,IAAKkC,EAAMG,GAC3B5C,MAAOyC,EAAMI,cACbjD,OAAQ6C,EAAMK,mBACd3C,OAAQsC,EAAMtC,OACdC,SAAUqC,EAAMrC,8CAkBtB,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAWqC,KAAKd,MAAMG,OAAS,MAAQ,gBACzCW,KAAKd,MAAMG,OAASW,KAAKkB,gBAAkB,kBAjClCC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.2c2878b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Movie.css';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nfunction Movie({title, poster, genres, synopsis}){\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre,index) => <MovieGenre genre={genre} key={index}/>)}\n                </div>\n                <div className=\"Movie__Synopsis\">\n                    <LinesEllipsis\n                        text={synopsis}\n                        maxLine=\"3\"\n                        ellipsis=' ...'\n                        trimRight\n                        basedOn=\"letters\"/>\n                </div>\n            </div>\n        </div> \n    );\n}\nfunction MovieGenre({genre}){\n    return <span className=\"Movie__genre\">{genre}</span> \n}\n\nfunction MoviePoster({alt, poster}){\n    return (\n        <img className=\"Movie__Poster\" src={poster} style={{width:\"200px\"}} alt={alt} title={alt}/>\n    );\n}\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\nMoviePoster.propTypes = {\n    poster: PropTypes.string,\n    alt:PropTypes.string\n}\nMovieGenre.propTypes = {  \n    genres: PropTypes.array.isRequired,\n}\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n  state = {\n  };\n  componentDidMount(){\n    this._getMovies();\n  }\n  _renderMovies() {\n    console.log(this.state.movies);\n    return this.state.movies.map(\n      (movie,i) => <Movie key={movie.id} \n          title={movie.title_english} \n          poster={movie.medium_cover_image} \n          genres={movie.genres}\n          synopsis={movie.synopsis}/>)\n  }\n   _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=rating\", {mode: 'cors', header:{\n      'Access-Control-Allow-Origin':'*'\n    }})\n    .then( data => data.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n  render(){\n    return(\n      <div className={this.state.movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}